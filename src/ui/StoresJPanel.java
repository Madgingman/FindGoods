/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Desktop;
import java.io.IOException;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import logic.Store;
import service.StoreService;

/**
 *
 * @author M
 */
public class StoresJPanel extends javax.swing.JPanel {
    private javax.swing.JDialog parent;
    public HashMap<String, Boolean> stores;
    
    /**
     * Creates new form StoresJPanel
     */
    public StoresJPanel(javax.swing.JDialog parent, Map<String, Boolean> stores, boolean enableAdminElements) {
	this.parent = parent;
	initComponents();
	
	this.stores = new HashMap<>();
	this.stores.putAll(stores);
	
	availableStoresList.removeAll();
	selectedStoresList.removeAll();
	DefaultListModel selListModel = (DefaultListModel) selectedStoresList.getModel();
	DefaultListModel avListModel = (DefaultListModel) availableStoresList.getModel();
	for (Map.Entry<String, Boolean> store : stores.entrySet()) {
	    if (store.getValue()) {
		selListModel.addElement(store.getKey());
	    } else {
		avListModel.addElement(store.getKey());
	    }
	}

	this.deleteStoreBtn.setVisible(enableAdminElements);
	this.deleteStoreBtn.setEnabled(enableAdminElements);
	this.addStoreBtn.setVisible(enableAdminElements);
	this.addStoreBtn.setEnabled(enableAdminElements);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        avStoresScrPane = new javax.swing.JScrollPane();
        availableStoresList = new javax.swing.JList();
        selStoresScrPane = new javax.swing.JScrollPane();
        selectedStoresList = new javax.swing.JList();
        selectStoreBtn = new javax.swing.JButton();
        deselectStoreBtn = new javax.swing.JButton();
        browseBtn = new javax.swing.JButton();
        deleteStoreBtn = new javax.swing.JButton();
        addStoreBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("Используемые при поиске онлайн-магазины:");

        availableStoresList.setModel(new DefaultListModel());
        availableStoresList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availableStoresList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                availableStoresListFocusGained(evt);
            }
        });
        avStoresScrPane.setViewportView(availableStoresList);

        selectedStoresList.setModel(new DefaultListModel());
        selectedStoresList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        selectedStoresList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedStoresListFocusGained(evt);
            }
        });
        selStoresScrPane.setViewportView(selectedStoresList);

        selectStoreBtn.setText("->");
        selectStoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStoreBtnActionPerformed(evt);
            }
        });

        deselectStoreBtn.setText("<-");
        deselectStoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectStoreBtnActionPerformed(evt);
            }
        });

        browseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/browse.png"))); // NOI18N
        browseBtn.setToolTipText("Перейти на сайт магазина");
        browseBtn.setBorder(null);
        browseBtn.setBorderPainted(false);
        browseBtn.setContentAreaFilled(false);
        browseBtn.setFocusPainted(false);
        browseBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/browseDark.png"))); // NOI18N
        browseBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/browseHighlighted.png"))); // NOI18N
        browseBtn.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/browseHighlighted.png"))); // NOI18N
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        deleteStoreBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/delete.png"))); // NOI18N
        deleteStoreBtn.setToolTipText("Удалить магазин из базы");
        deleteStoreBtn.setBorder(null);
        deleteStoreBtn.setBorderPainted(false);
        deleteStoreBtn.setContentAreaFilled(false);
        deleteStoreBtn.setFocusPainted(false);
        deleteStoreBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/deleteDark.png"))); // NOI18N
        deleteStoreBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/deleteHighlighted.png"))); // NOI18N
        deleteStoreBtn.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/deleteHighlighted.png"))); // NOI18N
        deleteStoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStoreBtnActionPerformed(evt);
            }
        });

        addStoreBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/plus.png"))); // NOI18N
        addStoreBtn.setToolTipText("Добавить новый магазин в базу");
        addStoreBtn.setBorder(null);
        addStoreBtn.setBorderPainted(false);
        addStoreBtn.setContentAreaFilled(false);
        addStoreBtn.setFocusPainted(false);
        addStoreBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/plusDark.png"))); // NOI18N
        addStoreBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/plusHighlighted.png"))); // NOI18N
        addStoreBtn.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/plusHighlighted.png"))); // NOI18N
        addStoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStoreBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Доступные онлайн-магазины:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(browseBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteStoreBtn)
                        .addGap(18, 18, 18)
                        .addComponent(addStoreBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(avStoresScrPane)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(deselectStoreBtn)
                                    .addComponent(selectStoreBtn)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(selStoresScrPane))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseBtn)
                    .addComponent(deleteStoreBtn)
                    .addComponent(addStoreBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectStoreBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deselectStoreBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(selStoresScrPane, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                    .addComponent(avStoresScrPane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void availableStoresListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_availableStoresListFocusGained
        selectedStoresList.clearSelection();
    }//GEN-LAST:event_availableStoresListFocusGained

    private void selectedStoresListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedStoresListFocusGained
        availableStoresList.clearSelection();
    }//GEN-LAST:event_selectedStoresListFocusGained

    private void selectStoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStoreBtnActionPerformed
        int index = availableStoresList.getSelectedIndex();
        if (index != -1) {
            DefaultListModel avListModel = (DefaultListModel) availableStoresList.getModel();
            String store = avListModel.get(index).toString();
            ((DefaultListModel) selectedStoresList.getModel()).addElement(store);
            avListModel.remove(index);
            stores.put(store, true);
        }
    }//GEN-LAST:event_selectStoreBtnActionPerformed

    private void deselectStoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectStoreBtnActionPerformed
        int index = selectedStoresList.getSelectedIndex();
        if (index != -1) {
            DefaultListModel selListModel = (DefaultListModel) selectedStoresList.getModel();
            String store = selListModel.get(index).toString();
            ((DefaultListModel) availableStoresList.getModel()).addElement(store);
            selListModel.remove(index);
            stores.put(store, false);
        }
    }//GEN-LAST:event_deselectStoreBtnActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        String storeName = getSelectedStore();
        if (!storeName.isEmpty()) {
            try {
                Store store = StoreService.getStore(storeName);
                if (store != null) {
                    Desktop.getDesktop().browse(store.getUrl().toURI());
                }
            } catch (IOException | URISyntaxException | SQLException ex) {
                JOptionPane.showMessageDialog(null, "Browsing failed.",
                    "Error", JOptionPane.ERROR_MESSAGE, null);
            }
        }
    }//GEN-LAST:event_browseBtnActionPerformed

    private void deleteStoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStoreBtnActionPerformed
        String storeName;
        int index;
        if (selectedStoresList.hasFocus()) {
            index = selectedStoresList.getSelectedIndex();
            if (index != -1) {
                storeName = selectedStoresList.getSelectedValue().toString();
            } else {
                return;
            }
        } else if (availableStoresList.hasFocus()) {
            index = availableStoresList.getSelectedIndex();
            if (index != -1) {
                storeName = availableStoresList.getSelectedValue().toString();
            } else {
                return;
            }
        } else {
            return;
        }

        try {
            Store store = StoreService.getStore(storeName);
            if (store != null) {
                StoreService.removeStore(store);
                if (selectedStoresList.hasFocus()) {
                    ((DefaultListModel) selectedStoresList.getModel()).remove(index);
                } else {
                    ((DefaultListModel) availableStoresList.getModel()).remove(index);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Unexpected database error.", "Error",
                JOptionPane.ERROR_MESSAGE, null);
        }
    }//GEN-LAST:event_deleteStoreBtnActionPerformed

    private void addStoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStoreBtnActionPerformed
        AddStoreJDialog addStoreDlg = new AddStoreJDialog(this.parent, true);
        addStoreDlg.setVisible(true);
        if (addStoreDlg.store != null) {
            ((DefaultListModel) availableStoresList.getModel()).addElement(addStoreDlg.store.getName());
            updateStoresMap();
        }
    }//GEN-LAST:event_addStoreBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStoreBtn;
    private javax.swing.JScrollPane avStoresScrPane;
    private javax.swing.JList availableStoresList;
    private javax.swing.JButton browseBtn;
    private javax.swing.JButton deleteStoreBtn;
    private javax.swing.JButton deselectStoreBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane selStoresScrPane;
    private javax.swing.JButton selectStoreBtn;
    private javax.swing.JList selectedStoresList;
    // End of variables declaration//GEN-END:variables

    private String getSelectedStore() {
	int index = availableStoresList.getSelectedIndex();
	if (index != -1) {
	    return availableStoresList.getSelectedValue().toString();
	} else {
	    index = selectedStoresList.getSelectedIndex();
	    if (index != -1) {
		return selectedStoresList.getSelectedValue().toString();
	    } else {
		return "";
	    }
	}
    }

    private void updateStoresMap() {
	DefaultListModel avListModel = (DefaultListModel) availableStoresList.getModel();
	for (int i = 0; i < avListModel.getSize(); i++) {
	    stores.put(avListModel.get(i).toString(), false);
	}
	
	DefaultListModel selListModel = (DefaultListModel) selectedStoresList.getModel();
	for (int i = 0; i < selListModel.getSize(); i++) {
	    stores.put(selListModel.get(i).toString(), true);
	}
    }

}
